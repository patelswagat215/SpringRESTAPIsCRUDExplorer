package com.aithinkers.rest;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aithinkers.entity.Employee;
import com.aithinkers.service.EmployeeService;
import com.aithinkers.service.EmployeeServiceJPASupport;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

@RestController
@RequestMapping("/employeeJPA-api")
public class EmployeeRestControllerJPASupport {
	@Autowired
	private EmployeeServiceJPASupport empService;

	@Autowired
	private ObjectMapper objectMapper;

	// Getting all Employee at a whole

	@GetMapping("/getAllEmpDtls")
	public List<Employee> getEmployeesDetails() {
		List<Employee> all = empService.findAllEmployees();
		return all;
	}

	// Getting Employee by their ID

	@GetMapping("/employee/{empId}")
	public Employee getEmployee(@PathVariable Integer empId) {
		if (empId == null)
			throw new RuntimeException("Id is null" + empId);
		return empService.findEmployeeByID(empId);

	}

	// Adding a new Employee

	@PostMapping("/addEmployee")
	public Employee addEmployee(@RequestBody Employee emp) {
		// Because ID is generated by the application,In case if user pass Integer then
		// set it to null
		emp.setId(null);

		return empService.saveEmployeeDetails(emp);
	}

	// Update Employeee

	@PutMapping("/updateEmployee")
	public Employee updateEmployee(@RequestBody Employee emp) {
		return empService.saveEmployeeDetails(emp);

	}

	// Partial Update

	@PatchMapping("/partialUpdate/{id}")
	public Employee partialUpdate(@PathVariable Integer id, @RequestBody Map<String, Object> patchPayload) {
		Employee employeeByID = empService.findEmployeeByID(id);

		if (employeeByID == null) {
			throw new RuntimeException("Employee with this id is not available:-" + id);
		} else if (patchPayload.containsKey("id")) {
			throw new RuntimeException("Id cant be modified :-" + id);
		}

		Employee patchedEmployee = apply(patchPayload, employeeByID);

		return empService.saveEmployeeDetails(patchedEmployee);

	}

	private Employee apply(Map<String, Object> patchPayload, Employee employeeByID) {
		// Convert Employee Object to a JSON Object node
		ObjectNode employeeNode = objectMapper.convertValue(employeeByID, ObjectNode.class);

		// Convert the patch payload map to a JSON Object node
		ObjectNode patchNode = objectMapper.convertValue(patchPayload, ObjectNode.class);

		// Merge the patchupdates into the employee node
		employeeNode.setAll(patchNode);

		return objectMapper.convertValue(employeeNode, Employee.class);
	}

	// Delete a Record
	
	@DeleteMapping("/deleteById/{id}")
	public String deleteEmployeeById(@PathVariable Integer id) {
		// Find employee by their ID
		Employee employee = empService.findEmployeeByID(id);

		if (employee == null) {
			throw new RuntimeException("Employee with this Id is null :-" + id);
		}
		
		else
		{
			empService.deleteByid(id);
			return "Employee ID deleted :-" + id;
		}

		

	}

}
